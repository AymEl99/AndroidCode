 private void setupWebView() {
        try {
            webView = findViewById(R.id.webview);
            if (webView == null) {
                Log.e(TAG, "WebView not found in layout");
                return;
            }

            WebSettings webSettings = webView.getSettings();

            // Enable JavaScript and other essential settings
            webSettings.setJavaScriptEnabled(true);
            webSettings.setDomStorageEnabled(true);
            webSettings.setAllowFileAccess(true);
            webSettings.setAllowContentAccess(true);
            webSettings.setAllowFileAccessFromFileURLs(true);
            webSettings.setAllowUniversalAccessFromFileURLs(true);
            webSettings.setMediaPlaybackRequiresUserGesture(false);
            webSettings.setMixedContentMode(WebSettings.MIXED_CONTENT_ALWAYS_ALLOW);
            webSettings.setCacheMode(WebSettings.LOAD_DEFAULT);
            webSettings.setOffscreenPreRaster(true);

            // Set layout algorithm to improve rendering
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
                webSettings.setLayoutAlgorithm(WebSettings.LayoutAlgorithm.TEXT_AUTOSIZING);
            } else {
                webSettings.setLayoutAlgorithm(WebSettings.LayoutAlgorithm.NORMAL);
            }

            // Set WebView client for better error handling and page load events
            webView.setWebViewClient(new WebViewClient() {
                @Override
                public void onReceivedError(WebView view, WebResourceRequest request, WebResourceError error) {
                    super.onReceivedError(view, request, error);
                    Log.e("WebView", "Error: " + error.getDescription() + " for URL: " + request.getUrl());
                }

                @Override
                public void onPageStarted(WebView view, String url, Bitmap favicon) {
                    super.onPageStarted(view, url, favicon);

                    // Inject CSS early for full centering (horizontal and vertical)
                    String cssInjection = "(function() {" +
                            "var style = document.createElement('style');" +
                            "style.type = 'text/css';" +
                            "style.innerHTML = 'html, body { height: 100%; width: 100%; margin: 0; padding: 0; display: flex; justify-content: center; align-items: center; } " +
                            "#root { display: flex; flex-direction: column; align-items: center; width: 100%; max-width: 500px; } " +
                            ".player-container { width: 90%; max-width: 450px; margin: 0 auto; }';" +
                            "document.head.appendChild(style);" +
                            "})();";

                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
                        webView.evaluateJavascript(cssInjection, null);
                    } else {
                        webView.loadUrl("javascript:" + cssInjection);
                    }
                }

                @Override
                public void onPageFinished(WebView view, String url) {
                    super.onPageFinished(view, url);
                    Log.d("WebView", "Page loaded: " + url);

                    // Apply centered layout styles again to ensure they're applied
                    String cssInjection = "(function() {" +
                            "var style = document.createElement('style');" +
                            "style.type = 'text/css';" +
                            "style.innerHTML = 'html, body { height: 100%; width: 100%; margin: 0; padding: 0; display: flex; justify-content: center; align-items: center; } " +
                            "#root { display: flex; flex-direction: column; align-items: center; width: 100%; max-width: 500px; } " +
                            ".player-container, .playlist-container { width: 90%; max-width: 450px; margin: 0 auto; }';" +
                            "document.head.appendChild(style);" +
                            "})();";

                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
                        webView.evaluateJavascript(cssInjection, null);
                    } else {
                        webView.loadUrl("javascript:" + cssInjection);
                    }

                    // Apply fix for any elements with fixed positions (like the player)
                    String centerFixedElements = "(function() {" +
                            "var elements = document.querySelectorAll('.player-card, .playlist-item');" +
                            "for(var i=0; i < elements.length; i++) {" +
                            "  elements[i].style.margin = '0 auto';" +
                            "  elements[i].style.left = '0';" +
                            "  elements[i].style.right = '0';" +
                            "}" +
                            "})();";

                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
                        webView.evaluateJavascript(centerFixedElements, null);
                    } else {
                        webView.loadUrl("javascript:" + centerFixedElements);
                    }

                    // Hide debug text
                    hideDebugText();

                    // Load JSON data after page is fully loaded
                    loadJSONData();

                    // Critical fix: Only inject playback scripts on first load
                    // and restore player state on subsequent loads
                    if (isFirstLoad) {
                        Log.d(TAG, "First load - injecting playback scripts");
                        injectUnifiedPlaybackScript();
                        injectContinuousPlaybackScript();
                        setupMusicStateTracking(view);
                        isFirstLoad = false;
                    } else {
                        Log.d(TAG, "Subsequent load - checking music state");
                        if (isMusicPlaying) {
                            Log.d(TAG, "Music was playing, restoring state");
                            // Don't inject scripts again, just restore the state
                            String checkAudio = "javascript:(function() {" +
                                    "var audio = document.querySelector('audio');" +
                                    "if (!audio) {" +
                                    "    console.log('No audio element found on reload');" +
                                    "    return false;" +
                                    "}" +
                                    "return true;" +
                                    "})()";

                            webView.evaluateJavascript(checkAudio, result -> {
                                if (result != null && result.equals("true")) {
                                    restorePlayerState();
                                    setupMusicStateTracking(view);
                                } else {
                                    // If no audio element found, we need to inject scripts again
                                    injectUnifiedPlaybackScript();
                                    injectContinuousPlaybackScript();
                                    setupMusicStateTracking(view);

                                    // Wait a bit for scripts to initialize before restoring
                                    new Handler().postDelayed(() -> restorePlayerState(), 500);
                                }
                            });
                        }
                    }
                }

                // Handle WebView crashes
                @Override
                public boolean onRenderProcessGone(WebView view, RenderProcessGoneDetail detail) {
                    Log.e(TAG, "WebView crashed, recreating...");
                    // Remove the crashed WebView
                    ViewGroup parent = (ViewGroup) view.getParent();
                    if (parent != null) {
                        parent.removeView(view);
                    }
                    view.destroy();

                    // Create a new WebView
                    webView = new WebView(MainActivity.this);
                    webView.setId(R.id.webview);
                    if (parent != null) {
                        parent.addView(webView);
                    }

                    // Reset state since we've had a crash
                    isFirstLoad = true;

                    // Set up the new WebView
                    setupWebView();
                    return true;
                }
            });

            // Add JavaScript interface - modify to include our tracking method
            webView.addJavascriptInterface(new WebAppInterface(), "Android");

            // Set Chrome client for console messaging
            webView.setWebChromeClient(new WebChromeClient() {
                @Override
                public boolean onConsoleMessage(android.webkit.ConsoleMessage consoleMessage) {
                    Log.d("WebConsole", consoleMessage.message() + " -- From line " +
                            consoleMessage.lineNumber() + " of " + consoleMessage.sourceId());
                    return true;
                }
            });

            // Load the HTML file
            webView.loadUrl("file:///android_asset/index.html");
        } catch (Exception e) {
            Log.e(TAG, "Error setting up WebView: " + e.getMessage(), e);
            Toast.makeText(this, "Error loading web content", Toast.LENGTH_SHORT).show();
        }
    }

    // Keep this implementation of setupMusicStateTracking
    private void setupMusicStateTracking(WebView view) {
        String trackingScript = "javascript:(function() {" +
                "console.log('Setting up music state tracking');" +
                "var audio = document.querySelector('audio');" +
                "if (!audio) {" +
                "    console.log('No audio element found for tracking');" +
                "    return;" +
                "}" +

                "// Set up event listeners to track state" +
                "audio.addEventListener('play', function() {" +
                "    console.log('Audio playing - reporting to Android');" +
                "    Android.setMusicPlaying(true, audio.src);" +
                "});" +

                "audio.addEventListener('pause', function() {" +
                "    console.log('Audio paused - reporting to Android');" +
                "    Android.setMusicPlaying(false, audio.src);" +
                "});" +

                "audio.addEventListener('ended', function() {" +
                "    console.log('Audio ended - reporting to Android');" +
                "    Android.setMusicPlaying(false, '');" +
                "});" +

                "// Check current state right away" +
                "if (!audio.paused) {" +
                "    console.log('Audio is currently playing');" +
                "    Android.setMusicPlaying(true, audio.src);" +
                "}" +

                "console.log('Music state tracking set up successfully');" +
                "})();";

        try {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
                view.evaluateJavascript(trackingScript, result -> {
                    Log.d(TAG, "Music tracking setup result: " + result);
                });
            } else {
                view.loadUrl(trackingScript);
            }
        } catch (Exception e) {
            Log.e(TAG, "Error setting up music tracking: " + e.getMessage(), e);
        }
    }
    private void injectUnifiedPlaybackScript() {
        if (webView == null) return;

        String script =
                "javascript:(function() {" +
                        "   console.log('Injecting unified playback script...');" +
                        "   var audio = document.querySelector('audio');" +
                        "   if (!audio) {" +
                        "       console.log('No audio element found, creating one');" +
                        "       audio = document.createElement('audio');" +
                        "       audio.id = 'audioPlayer';" +
                        "       document.body.appendChild(audio);" +
                        "   }" +

                        "   // Important variables to track state" +
                        "   window.audioState = {" +
                        "       wasPlaying: false," +
                        "       currentTime: 0," +
                        "       currentSrc: ''," +
                        "       manuallyPaused: false" +  // Track if user manually paused
                        "   };" +

                        "   // Create a unified player object" +
                        "   window.unifiedPlayer = {" +
                        "       audioElement: audio," +
                        "       play: function() {" +
                        "           var playPromise = this.audioElement.play();" +
                        "           if (playPromise !== undefined) {" +
                        "               playPromise.catch(e => console.log('Play error: ' + e));" +
                        "           }" +
                        "           window.audioState.wasPlaying = true;" +
                        "           window.audioState.manuallyPaused = false;" +
                        "           localStorage.setItem('wasPlaying', 'true');" +
                        "           if (Android && typeof Android.setMusicPlaying === 'function') {" +
                        "               Android.setMusicPlaying(true, this.audioElement.src);" +
                        "           }" +
                        "       }," +
                        "       pause: function() {" +
                        "           this.audioElement.pause();" +
                        "           window.audioState.wasPlaying = false;" +
                        "           window.audioState.manuallyPaused = true;" +
                        "           localStorage.setItem('wasPlaying', 'false');" +
                        "           if (Android && typeof Android.setMusicPlaying === 'function') {" +
                        "               Android.setMusicPlaying(false, this.audioElement.src);" +
                        "           }" +
                        "       }," +
                        "       loadSong: function(src) {" +
                        "           this.audioElement.src = src;" +
                        "           window.audioState.currentSrc = src;" +
                        "           localStorage.setItem('currentSrc', src);" +
                        "       }," +
                        "       loadAndPlaySong: function(src) {" +
                        "           this.loadSong(src);" +
                        "           this.play();" +
                        "       }," +
                        "       getCurrentSong: function() {" +
                        "           return this.audioElement.src;" +
                        "       }," +
                        "       seekTo: function(time) {" +
                        "           this.audioElement.currentTime = time;" +
                        "       }" +
                        "   };" +

                        "   // Set to autoplay when loaded" +
                        "   audio.autoplay = true;" +
                        "   audio.loop = false;" +

                        "   // Handle track ending - advance to next track" +
                        "   audio.addEventListener('ended', function() {" +
                        "       console.log('Track ended, playing next...');" +
                        "       var nextButton = document.querySelector('.next-button');" +
                        "       if (nextButton) {" +
                        "           nextButton.click();" +
                        "       }" +
                        "   });" +

                        "   // Track play status changes" +
                        "   audio.addEventListener('play', function() {" +
                        "       console.log('Audio started playing');" +
                        "       window.audioState.wasPlaying = true;" +
                        "       window.audioState.manuallyPaused = false;" +
                        "       localStorage.setItem('wasPlaying', 'true');" +
                        "       if (Android && typeof Android.setMusicPlaying === 'function') {" +
                        "           Android.setMusicPlaying(true, audio.src);" +
                        "       }" +
                        "   });" +

                        "   audio.addEventListener('pause', function() {" +
                        "       console.log('Audio paused');" +
                        "       if (window.audioState.manuallyPaused) {" +
                        "           console.log('Manual pause detected');" +
                        "           localStorage.setItem('wasPlaying', 'false');" +
                        "           if (Android && typeof Android.setMusicPlaying === 'function') {" +
                        "               Android.setMusicPlaying(false, audio.src);" +
                        "           }" +
                        "       } else {" +
                        "           // System might have paused it, keep wasPlaying state" +
                        "           console.log('System pause detected, maintaining state');" +
                        "       }" +
                        "   });" +

                        "   // Track user pause/play button clicks" +
                        "   document.addEventListener('click', function(e) {" +
                        "       if (e.target.classList.contains('pause-button')) {" +
                        "           console.log('User clicked pause');" +
                        "           window.audioState.manuallyPaused = true;" +
                        "           window.audioState.wasPlaying = false;" +
                        "           localStorage.setItem('wasPlaying', 'false');" +
                        "           if (Android && typeof Android.setMusicPlaying === 'function') {" +
                        "               Android.setMusicPlaying(false, audio.src);" +
                        "           }" +
                        "       } else if (e.target.classList.contains('play-button')) {" +
                        "           console.log('User clicked play');" +
                        "           window.audioState.manuallyPaused = false;" +
                        "           window.audioState.wasPlaying = true;" +
                        "           localStorage.setItem('wasPlaying', 'true');" +
                        "           if (Android && typeof Android.setMusicPlaying === 'function') {" +
                        "               Android.setMusicPlaying(true, audio.src);" +
                        "           }" +
                        "       }" +
                        "   }, true);" +  // Use capture phase to ensure it runs first

                        "   // Periodically save current state (every 3 seconds)" +
                        "   setInterval(function() {" +
                        "       if (!audio.paused) {" +
                        "           localStorage.setItem('currentTime', audio.currentTime);" +
                        "           localStorage.setItem('currentSrc', audio.src);" +
                        "       }" +
                        "   }, 3000);" +

                        "   console.log('Unified playback script injected successfully');" +
                        "})();";

        try {
            webView.evaluateJavascript(script, result -> {
                Log.d(TAG, "Unified playback script injection result: " + result);
            });
        } catch (Exception e) {
            Log.e(TAG, "Error injecting unified playback script: " + e.getMessage(), e);
        }
    }

    // New method to inject screen lock handling script
    private void injectScreenLockHandlingScript() {
        if (webView == null) return;

        String script =
                "javascript:(function() {" +
                        "   // Ensure audio keeps playing during screen lock/unlock" +
                        "   var audio = document.querySelector('audio');" +
                        "   if (audio) {" +
                        "       // Store current state and time before screen turns off" +
                        "       document.addEventListener('visibilitychange', function() {" +
                        "           console.log('Visibility changed. Hidden: ' + document.hidden);" +
                        "           if (document.hidden) {" +
                        "               // Page is being hidden (screen off)" +
                        "               if (!audio.paused) {" +
                        "                   localStorage.setItem('wasPlaying', 'true');" +
                        "                   localStorage.setItem('currentTime', audio.currentTime);" +
                        "                   localStorage.setItem('currentTrack', audio.src);" +
                        "                   console.log('Stored playback state before hidden');" +
                        "               }" +
                        "           } else {" +
                        "               // Page is becoming visible again (screen on)" +
                        "               console.log('Page visible again');" +
                        "               if (localStorage.getItem('wasPlaying') === 'true') {" +
                        "                   var savedTime = parseFloat(localStorage.getItem('currentTime') || 0);" +
                        "                   var savedTrack = localStorage.getItem('currentTrack');" +
                        "                   var promise = audio.play();" +
                        "                   if (promise !== undefined) {" +
                        "                       promise.then(_ => {" +
                        "                           console.log('Playback resumed successfully');" +
                        "                           if (audio.src === savedTrack && !isNaN(savedTime)) {" +
                        "                               audio.currentTime = savedTime;" +
                        "                           }" +
                        "                       }).catch(error => {" +
                        "                           console.log('Auto-play was prevented: ' + error);" +
                        "                       });" +
                        "                   }" +
                        "               }" +
                        "           }" +
                        "       });" +
                        "       // Add a focus handler to resume playback" +
                        "       window.addEventListener('focus', function() {" +
                        "           console.log('Window focused');" +
                        "           if (localStorage.getItem('wasPlaying') === 'true') {" +
                        "               var savedTime = parseFloat(localStorage.getItem('currentTime') || 0);" +
                        "               var promise = audio.play();" +
                        "               if (promise !== undefined) {" +
                        "                   promise.then(_ => {" +
                        "                       console.log('Playback resumed on focus');" +
                        "                       if (!isNaN(savedTime)) {" +
                        "                           audio.currentTime = savedTime;" +
                        "                       }" +
                        "                   }).catch(error => {" +
                        "                       console.log('Focus auto-play was prevented: ' + error);" +
                        "                   });" +
                        "               }" +
                        "           }" +
                        "       });" +
                        "   }" +
                        "})();";

        try {
            webView.evaluateJavascript(script, null);
        } catch (Exception e) {
            Log.e(TAG, "Error injecting screen lock handling script: " + e.getMessage(), e);
        }
    }


    private void injectContinuousPlaybackScript() {
        String script = "javascript:(function() {" +
                "    console.log('Injecting continuous playback script');" +
                "    var audio = document.querySelector('audio');" +
                "    if (!audio) {" +
                "        console.log('No audio element found for continuous playback');" +
                "        return;" +
                "    }" +

                "    // Prevent duplicate script injection" +
                "    if (window.continuousPlaybackInitialized) {" +
                "        console.log('Continuous playback already initialized');" +
                "        return;" +
                "    }" +

                "    window.continuousPlaybackInitialized = true;" +

                "    // Keep track of playback state through page reloads" +
                "    audio.addEventListener('play', function() {" +
                "        if (Android && typeof Android.resumePlayback === 'function') {" +
                "            Android.resumePlayback();" +
                "        }" +
                "    });" +

                "    audio.addEventListener('timeupdate', function() {" +
                "        if (Android && typeof Android.setCurrentTime === 'function') {" +
                "            Android.setCurrentTime(audio.currentTime);" +
                "        }" +
                "    });" +

                "    audio.addEventListener('pause', function() {" +
                "        if (Android && typeof Android.pausePlayback === 'function') {" +
                "            Android.pausePlayback();" +
                "        }" +
                "    });" +

                "    console.log('Continuous playback script initialized');" +
                "})();";

        try {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
                webView.evaluateJavascript(script, result -> {
                    Log.d(TAG, "Continuous playback script result: " + result);
                });
            } else {
                webView.loadUrl(script);
            }
        } catch (Exception e) {
            Log.e(TAG, "Error injecting continuous playback script: " + e.getMessage(), e);
        }
    }


    private void loadJSONData() {
        new Thread(() -> {
            try {
                final String json = loadJSONFromAssets("data.json");
                if (json != null && !json.isEmpty()) {
                    Log.d(TAG, "Loaded JSON data: " + (json.length() > 100 ? json.substring(0, 100) + "..." : json));
                    // Always use UI thread for WebView interactions
                    runOnUiThread(() -> {
                        try {
                            if (webView != null) {
                                // Hide debug text with multiple approaches
                                hideDebugText();
                                String escaped = escapeJsString(json);
                                webView.evaluateJavascript(
                                        "javascript:initMusicPlayerFromJson('" + escaped + "')", value -> {
                                            Log.d("WebView", "initMusicPlayerFromJson result: " + value);
                                            if (!"true".equals(value)) {
                                                // Fallback to the original method
                                                try {
                                                    webView.evaluateJavascript(
                                                            "javascript:initMusicPlayer(" + json + ")", innerValue -> {
                                                                Log.d("WebView", "initMusicPlayer fallback result: " + innerValue);
                                                                // Hide debug text again after initialization
                                                                hideDebugText();
                                                            });
                                                } catch (Exception e) {
                                                    Log.e(TAG, "Error in fallback method: " + e.getMessage(), e);
                                                }
                                            } else {
                                                // Hide debug text after successful initialization
                                                hideDebugText();
                                            }
                                        });
                            }
                        } catch (Exception e) {
                            Log.e(TAG, "Error evaluating JavaScript: " + e.getMessage(), e);
                        }
                    });
                } else {
                    Log.e(TAG, "JSON data is empty or null");
                }
            } catch (Exception e) {
                Log.e(TAG, "Error loading JSON data", e);
            }
        }).start();
    }

    private void saveCurrentSongInfo() {
        if (webView != null) {
            try {
                webView.evaluateJavascript(
                        "javascript:(function() {" +
                                "if(typeof selectedSong !== 'undefined' && selectedSong) { " +
                                "localStorage.setItem('songTitle', document.querySelector('.music-player__subtitle') ? document.querySelector('.music-player__subtitle').textContent.trim() : '');" +
                                "localStorage.setItem('artistName', document.querySelector('.music-player__singer-name') ? document.querySelector('.music-player__singer-name').textContent.trim() : '');" +
                                "localStorage.setItem('currentTime', selectedSong.currentTime);" +
                                "localStorage.setItem('wasPlaying', selectedSong.paused ? 'false' : 'true');" +
                                "if(typeof saveCurrentPlayerState === 'function') {" +
                                "  saveCurrentPlayerState();" +
                                "}" +
                                "return true;" +
                                "} else { return false; }" +
                                "})()",
                        result -> {
                            Log.d(TAG, "Song info saved: " + result);
                        }
                );
            } catch (Exception e) {
                Log.e(TAG, "Error saving song info: " + e.getMessage(), e);
            }
        }
    }

    private void hideDebugText() {
        if (webView != null) {
            try {
                webView.evaluateJavascript(
                        "javascript:(function() {" +
                                "var debugElements = document.querySelectorAll('div, p, span');" +
                                "for(var i=0; i<debugElements.length; i++) {" +
                                "   var text = debugElements[i].textContent || '';" +
                                "   if(text.includes('Page loaded') || " +
                                "      text.includes('Initializing') || " +
                                "      text.includes('Android')) {" +
                                "       debugElements[i].style.display = 'none';" +
                                "   }" +
                                "}" +
                                "return true;" +
                                "})();", null);
            } catch (Exception e) {
                Log.e(TAG, "Error hiding debug text: " + e.getMessage(), e);
            }
        }
    }

    private String loadJSONFromAssets(String filename) {
        try {
            InputStream is = getAssets().open(filename);
            int size = is.available();
            byte[] buffer = new byte[size];
            is.read(buffer);
            is.close();
            return new String(buffer, "UTF-8");
        } catch (IOException e) {
            Log.e(TAG, "JSON load error: " + e.getMessage(), e);
            return "{}";
        }
    }

    public class WebAppInterface {
        // Keep your existing methods

        @JavascriptInterface
        public void setMusicPlaying(boolean isPlaying, String songUrl) {
            isMusicPlaying = isPlaying;
            if (songUrl != null && !songUrl.isEmpty()) {
                currentSong = songUrl;
            }
            Log.d(TAG, "Music state changed: playing=" + isPlaying + ", song=" + songUrl);
        }

        @JavascriptInterface
        public void pausePlayback() {
            if (isMusicPlaying) {
                isMusicPlaying = false;
                Log.d(TAG, "Playback paused via interface");
            }
        }

        @JavascriptInterface
        public void resumePlayback() {
            if (!isMusicPlaying) {
                isMusicPlaying = true;
                Log.d(TAG, "Playback resumed via interface");
            }
        }

        @JavascriptInterface
        public void setCurrentTime(float time) {
            // You can use this to track the current playback position if needed
            Log.d(TAG, "Current playback time: " + time);
        }
    }
    private void loadHomePage() {
        if (!isOnHomePage) {
            try {
                // Save current audio state before switching
                saveCurrentSongInfo();

                webView.evaluateJavascript(
                        "javascript:(function() {" +
                                // Show the music player container
                                "var playerContainer = document.getElementById('musicPlayerContainer');" +
                                "if (playerContainer) {" +
                                "   playerContainer.style.display = 'block';" +
                                "}" +
                                // Hide the other containers
                                "var privacyContainer = document.getElementById('privacy-policy-container');" +
                                "if (privacyContainer) {" +
                                "   privacyContainer.style.display = 'none';" +
                                "}" +
                                "var aboutUsContainer = document.getElementById('about-us-container');" +
                                "if (aboutUsContainer) {" +
                                "   aboutUsContainer.style.display = 'none';" +
                                "}" +

                                // CRITICAL: Check for any existing audio elements and handle them
                                "var audio = document.querySelector('audio');" +
                                "if (audio) {" +
                                "   // Store audio state before manipulating" +
                                "   var wasPlaying = !audio.paused;" +
                                "   var currentSrc = audio.src;" +
                                "   var currentTime = audio.currentTime;" +
                                "   localStorage.setItem('wasPlaying', wasPlaying ? 'true' : 'false');" +
                                "   localStorage.setItem('currentSrc', currentSrc);" +
                                "   localStorage.setItem('currentTime', currentTime);" +
                                "}" +

                                // Apply a safe pause to prevent overlapping audio when we return
                                "var audioElements = document.querySelectorAll('audio');" +
                                "if (audioElements.length > 1) {" +
                                "   console.log('Found multiple audio elements: ' + audioElements.length);" +
                                "   // Keep only the first audio element, pause others" +
                                "   for (var i = 1; i < audioElements.length; i++) {" +
                                "       audioElements[i].pause();" +
                                "       if (audioElements[i].parentNode) {" +
                                "           audioElements[i].parentNode.removeChild(audioElements[i]);" +
                                "       }" +
                                "   }" +
                                "}" +

                                // Restore the music state after a short delay
                                "setTimeout(function() {" +
                                "   var audio = document.querySelector('audio');" +
                                "   if (audio && localStorage.getItem('wasPlaying') === 'true') {" +
                                "       var savedSrc = localStorage.getItem('currentSrc');" +
                                "       var savedTime = parseFloat(localStorage.getItem('currentTime') || '0');" +
                                "       if (savedSrc && savedSrc !== '') {" +
                                "           if (audio.src !== savedSrc) {" +
                                "               audio.src = savedSrc;" +
                                "           }" +
                                "           audio.currentTime = savedTime;" +
                                "           var playPromise = audio.play();" +
                                "           if (playPromise !== undefined) {" +
                                "               playPromise.catch(e => {" +
                                "                   console.error('Play error:', e);" +
                                "               });" +
                                "           }" +
                                "       }" +
                                "   }" +
                                "}, 300);" +

                                "console.log('Home page displayed');" +
                                "return true;" +
                                "})()",
                        result -> {
                            Log.d(TAG, "Load home page result: " + result);
                        }
                );
                isOnHomePage = true;
            } catch (Exception e) {
                Log.e(TAG, "Error loading home page: " + e.getMessage(), e);
            }
        }
    }
    private void loadPrivacyPolicy() {
        try {
            isOnHomePage = false;

            // First check if the privacy_policy.html exists
            String privacyPolicyHtml = loadHTMLFromAssets("privacy_policy.html");
            if (privacyPolicyHtml == null || privacyPolicyHtml.isEmpty()) {
                Log.e(TAG, "Privacy policy HTML is empty or null");
                Toast.makeText(MainActivity.this, "Error: Privacy Policy file not found", Toast.LENGTH_SHORT).show();
                return;
            }

            // Save current music state before loading privacy policy
            webView.evaluateJavascript(
                    "javascript:(function() {" +
                            "var audio = document.querySelector('audio');" +
                            "if (audio) {" +
                            "   var wasPlaying = !audio.paused;" +
                            "   localStorage.setItem('wasPlaying', wasPlaying ? 'true' : 'false');" +
                            "   localStorage.setItem('currentSrc', audio.src);" +
                            "   localStorage.setItem('currentTime', audio.currentTime);" +
                            "   return {playing: wasPlaying, src: audio.src, time: audio.currentTime};" +
                            "} else {" +
                            "   return {playing: false};" +
                            "}" +
                            "})()",
                    state -> {
                        Log.d(TAG, "Audio state before privacy policy: " + state);
                    }
            );

            // Inject the Privacy Policy content without touching the audio element
            webView.evaluateJavascript(
                    "javascript:(function() {" +
                            "console.log('Privacy policy JS executing');" +
                            // Hide the About Us container if it exists
                            "var aboutUsContainer = document.getElementById('about-us-container');" +
                            "if (aboutUsContainer) {" +
                            "   aboutUsContainer.style.display = 'none';" +
                            "}" +
                            "var privacyContainer = document.getElementById('privacy-policy-container');" +
                            "if (!privacyContainer) {" +
                            "   console.log('Creating privacy container');" +
                            "   privacyContainer = document.createElement('div');" +
                            "   privacyContainer.id = 'privacy-policy-container';" +
                            "   privacyContainer.style.position = 'fixed';" +
                            "   privacyContainer.style.top = '0';" +
                            "   privacyContainer.style.left = '0';" +
                            "   privacyContainer.style.width = '100%';" +
                            "   privacyContainer.style.height = '100%';" +
                            "   privacyContainer.style.backgroundColor = '#fff';" +
                            "   privacyContainer.style.zIndex = '1000';" +
                            "   privacyContainer.style.overflow = 'auto';" +
                            "   document.body.appendChild(privacyContainer);" +
                            "}" +
                            "console.log('Setting privacy container content');" +
                            "privacyContainer.innerHTML = '" + escapeJsString(privacyPolicyHtml) + "';" +
                            "privacyContainer.style.display = 'block';" +
                            // Hide the music player container without affecting audio playback
                            "var playerContainer = document.getElementById('musicPlayerContainer');" +
                            "if (playerContainer) {" +
                            "   playerContainer.style.display = 'none';" +
                            "}" +
                            "console.log('Privacy policy displayed');" +
                            "return true;" +
                            "})()",
                    value -> {
                        Log.d(TAG, "Privacy policy load result: " + value);
                        if (!"true".equals(value)) {
                            Toast.makeText(MainActivity.this, "Error displaying Privacy Policy", Toast.LENGTH_SHORT).show();
                        }
                    }
            );
        } catch (Exception e) {
            Log.e(TAG, "Error loading privacy policy: " + e.getMessage(), e);
            Toast.makeText(MainActivity.this, "Error loading Privacy Policy", Toast.LENGTH_SHORT).show();
        }
    }

    private void loadAboutUs() {
        try {
            isOnHomePage = false;

            // First check if the about_us.html exists
            String aboutUsHtml = loadHTMLFromAssets("about_us.html");
            if (aboutUsHtml == null || aboutUsHtml.isEmpty()) {
                Log.e(TAG, "About Us HTML is empty or null");
                Toast.makeText(MainActivity.this, "Error: About Us file not found", Toast.LENGTH_SHORT).show();
                return;
            }

            // Save current music state before loading about us
            webView.evaluateJavascript(
                    "javascript:(function() {" +
                            "var audio = document.querySelector('audio');" +
                            "if (audio) {" +
                            "   var wasPlaying = !audio.paused;" +
                            "   localStorage.setItem('wasPlaying', wasPlaying ? 'true' : 'false');" +
                            "   localStorage.setItem('currentSrc', audio.src);" +
                            "   localStorage.setItem('currentTime', audio.currentTime);" +
                            "   return {playing: wasPlaying, src: audio.src, time: audio.currentTime};" +
                            "} else {" +
                            "   return {playing: false};" +
                            "}" +
                            "})()",
                    state -> {
                        Log.d(TAG, "Audio state before about us: " + state);
                    }
            );

            // Inject the About Us content without touching the audio element
            webView.evaluateJavascript(
                    "javascript:(function() {" +
                            "console.log('About Us JS executing');" +
                            // Hide the privacy policy container if it exists
                            "var privacyContainer = document.getElementById('privacy-policy-container');" +
                            "if (privacyContainer) {" +
                            "   privacyContainer.style.display = 'none';" +
                            "}" +
                            "var aboutUsContainer = document.getElementById('about-us-container');" +
                            "if (!aboutUsContainer) {" +
                            "   console.log('Creating about us container');" +
                            "   aboutUsContainer = document.createElement('div');" +
                            "   aboutUsContainer.id = 'about-us-container';" +
                            "   aboutUsContainer.style.position = 'fixed';" +
                            "   aboutUsContainer.style.top = '0';" +
                            "   aboutUsContainer.style.left = '0';" +
                            "   aboutUsContainer.style.width = '100%';" +
                            "   aboutUsContainer.style.height = '100%';" +
                            "   aboutUsContainer.style.backgroundColor = '#fff';" +
                            "   aboutUsContainer.style.zIndex = '1000';" +
                            "   aboutUsContainer.style.overflow = 'auto';" +
                            "   document.body.appendChild(aboutUsContainer);" +
                            "}" +
                            "console.log('Setting about us container content');" +
                            "aboutUsContainer.innerHTML = '" + escapeJsString(aboutUsHtml) + "';" +
                            "aboutUsContainer.style.display = 'block';" +
                            // Hide the music player container without affecting audio playback
                            "var playerContainer = document.getElementById('musicPlayerContainer');" +
                            "if (playerContainer) {" +
                            "   playerContainer.style.display = 'none';" +
                            "}" +
                            "console.log('About Us displayed');" +
                            "return true;" +
                            "})()",
                    value -> {
                        Log.d(TAG, "About Us load result: " + value);
                        if (!"true".equals(value)) {
                            Toast.makeText(MainActivity.this, "Error displaying About Us", Toast.LENGTH_SHORT).show();
                        } else {
                            // Successfully loaded About Us content
                            Log.d(TAG, "About Us successfully displayed");
                        }
                    }
            );
        } catch (Exception e) {
            Log.e(TAG, "Error loading about us: " + e.getMessage(), e);
            Toast.makeText(MainActivity.this, "Error loading About Us", Toast.LENGTH_SHORT).show();
        }
    }
    private void fixAudioOverlap() {
        if (webView != null) {
            webView.evaluateJavascript(
                    "javascript:(function() {" +
                            "var audioElements = document.querySelectorAll('audio');" +
                            "console.log('Checking for audio overlap, found: ' + audioElements.length + ' elements');" +

                            "if (audioElements.length > 1) {" +
                            "   // We have multiple audio elements - this is a problem" +
                            "   console.log('Found audio overlap! Fixing...');" +

                            "   // Find the playing one (if any)" +
                            "   var playingIndex = -1;" +
                            "   var playingSrc = '';" +
                            "   var playingTime = 0;" +

                            "   for (var i = 0; i < audioElements.length; i++) {" +
                            "       if (!audioElements[i].paused) {" +
                            "           playingIndex = i;" +
                            "           playingSrc = audioElements[i].src;" +
                            "           playingTime = audioElements[i].currentTime;" +
                            "           break;" +
                            "       }" +
                            "   }" +

                            "   // If none are playing, check if one was supposed to be playing" +
                            "   if (playingIndex === -1 && localStorage.getItem('wasPlaying') === 'true') {" +
                            "       playingSrc = localStorage.getItem('currentSrc');" +
                            "       playingTime = parseFloat(localStorage.getItem('currentTime') || '0');" +
                            "   }" +

                            "   // Pause all audio elements" +
                            "   for (var i = 0; i < audioElements.length; i++) {" +
                            "       audioElements[i].pause();" +
                            "   }" +

                            "   // Keep only the first audio element, remove others" +
                            "   for (var i = audioElements.length - 1; i > 0; i--) {" +
                            "       if (audioElements[i].parentNode) {" +
                            "           audioElements[i].parentNode.removeChild(audioElements[i]);" +
                            "       }" +
                            "   }" +

                            "   // If we had a playing audio, restore its state to the remaining audio element" +
                            "   if (playingSrc !== '') {" +
                            "       var remainingAudio = document.querySelector('audio');" +
                            "       if (remainingAudio) {" +
                            "           remainingAudio.src = playingSrc;" +
                            "           remainingAudio.currentTime = playingTime;" +
                            "           var playPromise = remainingAudio.play();" +
                            "           if (playPromise !== undefined) {" +
                            "               playPromise.catch(e => console.log('Error restoring play state: ' + e));" +
                            "           }" +
                            "       }" +
                            "   }" +

                            "   return {fixed: true, count: audioElements.length};" +
                            "}" +

                            "return {fixed: false, count: audioElements.length};" +
                            "})()",
                    result -> {
                        Log.d(TAG, "Audio overlap check result: " + result);
                    }
            );
        }
    }

    @Override
    public boolean onNavigationItemSelected(@NonNull MenuItem item) {
        DrawerLayout drawer = findViewById(R.id.drawer_layout);
        if (drawer != null) {
            drawer.closeDrawer(GravityCompat.START);
        }

        // Add these lines to fix the color issue
        NavigationView navigationView = findViewById(R.id.nav_view);
        Menu menu = navigationView.getMenu();
        for (int i = 0; i < menu.size(); i++) {
            menu.getItem(i).setChecked(false);
        }
        item.setChecked(true);

        // Your existing code continues here
        int id = item.getItemId();
        try {
            saveCurrentSongInfo();

            if (id == R.id.home) {
                loadHomePage();
            } else if (id == R.id.aboutus) {
                loadAboutUs();
            } else if (id == R.id.privacypolicy) {
                loadPrivacyPolicy();
            }

            clickCount++;
            if (clickCount % 15 == 0) {
                showInterstitialAd();
            }
        } catch (Exception e) {
            Log.e(TAG, "Navigation item error", e);
            Toast.makeText(this, "Unable to load page", Toast.LENGTH_SHORT).show();
        }

        return true;
    }
    /**
     * Helper method to load HTML from assets folder
     */
    private String loadHTMLFromAssets(String fileName) {
        try {
            InputStream is = getAssets().open(fileName);
            int size = is.available();
            byte[] buffer = new byte[size];
            is.read(buffer);
            is.close();
            return new String(buffer, "UTF-8");
        } catch (IOException e) {
            Log.e(TAG, "Error reading " + fileName + " from assets", e);
            return null;
        }
    }

    /**
     * Helper method to escape JavaScript strings
     */
    private String escapeJsString(String input) {
        if (input == null) return "";
        return input.replace("\\", "\\\\")
                .replace("'", "\\'")
                .replace("\n", "\\n")
                .replace("\r", "\\r");
    }

    @Override
    public void onBackPressed() {
        DrawerLayout drawer = findViewById(R.id.drawer_layout);
        if (drawer != null && drawer.isDrawerOpen(GravityCompat.START)) {
            drawer.closeDrawer(GravityCompat.START);
        } else if (!isOnHomePage) {
            // Use our method that doesn't reload the page
            loadHomePage();
        } else {
            // Ask if user wants to exit if playing music
            webView.evaluateJavascript(
                    "javascript:(function() {" +
                            "   var audio = document.querySelector('audio');" +
                            "   if (audio && !audio.paused) {" +
                            "       return true;" +
                            "   }" +
                            "   return false;" +
                            "})()",
                    result -> {
                        if ("true".equals(result)) {
                            // Music is playing, ask if they want to exit
                            new AlertDialog.Builder(MainActivity.this)
                                    .setTitle("Exit App")
                                    .setMessage("Music is still playing. Do you want to exit?")
                                    .setPositiveButton("Yes", (dialog, which) -> {
                                        savePlayerState();
                                        MainActivity.super.onBackPressed();
                                    })
                                    .setNegativeButton("No", null)
                                    .show();
                        } else {
                            // No music playing, exit normally
                            super.onBackPressed();
                        }
                    }
            );
        }
    }

    @Override
    public void startActivity(Intent intent) {
        saveCurrentSongInfo(); // Save current song info before starting a new activity
        intent.putExtra("KEEP_MUSIC_PLAYING", true);
        super.startActivity(intent);
    }

    // Override onSaveInstanceState to preserve WebView state
    @Override
    protected void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        if (webView != null) {
            saveCurrentSongInfo();
            webView.saveState(outState);
        }
    }

    // Override onRestoreInstanceState to restore WebView state
    @Override
    protected void onRestoreInstanceState(Bundle savedInstanceState) {
        super.onRestoreInstanceState(savedInstanceState);
        if (webView != null) {
            webView.restoreState(savedInstanceState);
        }
    }

    @Override
    protected void onResume() {
        super.onResume();
        try {
            if (webView != null) {
                webView.onResume();
                // Check for and fix any audio overlaps
                fixAudioOverlap();
                // Hide debug text when resuming
                hideDebugText();

                // Check if we're returning from another activity
                boolean isReturningFromActivity = getIntent().getBooleanExtra("RETURNING_FROM_ACTIVITY", false);
                if (!isReturningFromActivity) {
                    // Only load JSON data if this is the first load
                    loadJSONData();
                }

                // Always restore player state to ensure continuous playback
                restorePlayerState();

                // Acquire wake lock to prevent CPU from sleeping - use a stronger wake lock
                if (wakeLock == null || !wakeLock.isHeld()) {
                    PowerManager powerManager = (PowerManager) getSystemService(Context.POWER_SERVICE);
                    // Use PARTIAL_WAKE_LOCK to keep CPU running even with screen off
                    wakeLock = powerManager.newWakeLock(
                            PowerManager.PARTIAL_WAKE_LOCK | PowerManager.ON_AFTER_RELEASE,
                            "MusicApp:MusicPlayingWakeLock"
                    );
                    // Make it reference-counted to prevent premature release
                    wakeLock.setReferenceCounted(false);
                    // Keep the wake lock for a max of 1 hour (you can adjust)
                    wakeLock.acquire(60 * 60 * 1000L);
                    Log.d(TAG, "Wake lock acquired in onResume");
                }
            }

            // Resume ad display
            if (bannerAdView != null) {
                bannerAdView.resume();
            }
        } catch (Exception e) {
            Log.e(TAG, "Error in onResume: " + e.getMessage(), e);
        }
    }



    @Override
    protected void onPause() {
        try {
            if (bannerAdView != null) {
                bannerAdView.pause();
            }

            if (webView != null) {
                // Critical: Save player state but DO NOT pause WebView
                // We specifically don't call webView.onPause() to allow background playback
                savePlayerState();
            }
        } catch (Exception e) {
            Log.e(TAG, "Error in onPause: " + e.getMessage(), e);
        }
        super.onPause();
    }


    private void savePlayerState() {
        if (webView != null) {
            try {
                webView.evaluateJavascript(
                        "javascript:(function() {" +
                                "   var audio = document.querySelector('audio');" +
                                "   if (audio) {" +
                                "       var isPlaying = !audio.paused;" +
                                "       localStorage.setItem('wasPlaying', isPlaying ? 'true' : 'false');" +
                                "       localStorage.setItem('currentTime', audio.currentTime);" +
                                "       localStorage.setItem('currentSrc', audio.src);" +
                                "       console.log('Saved player state: playing=' + isPlaying + " +
                                "           ' time=' + audio.currentTime + ', src=' + audio.src);" +
                                "       return {playing: isPlaying, time: audio.currentTime, src: audio.src};" +
                                "   } else {" +
                                "       console.log('No audio element found for saving state');" +
                                "       return {playing: false};" +
                                "   }" +
                                "})()",
                        result -> {
                            Log.d(TAG, "Save player state result: " + result);

                            // Update our Java-side tracking
                            if (result != null && result.contains("playing\":true")) {
                                isMusicPlaying = true;

                                // Extract the src if possible
                                if (result.contains("src\":\"")) {
                                    int start = result.indexOf("src\":\"") + 6;
                                    int end = result.indexOf("\"", start);
                                    if (end > start) {
                                        currentSong = result.substring(start, end);
                                    }
                                }
                            } else {
                                isMusicPlaying = false;
                            }
                        }
                );
            } catch (Exception e) {
                Log.e(TAG, "Error saving player state: " + e.getMessage(), e);
            }
        }
    }

    private void restorePlayerState() {
        if (webView != null) {
            try {
                Log.d(TAG, "Attempting to restore player state... isMusicPlaying=" + isMusicPlaying);

                // First, check for audio overlaps and fix them
                fixAudioOverlap();

                // Improved restore script - safely handles multiple elements
                String restoreStateScript = "javascript:(function() { " +
                        "var audio = document.querySelector('audio');" +
                        "if (!audio) {" +
                        "   console.log('No audio element found!');" +
                        "   return {success: false, reason: 'no_audio'};" +
                        "}" +

                        // Get saved state
                        "var wasPlaying = localStorage.getItem('wasPlaying') === 'true';" +
                        "var savedSrc = localStorage.getItem('currentSrc');" +
                        "var savedTime = parseFloat(localStorage.getItem('currentTime') || '0');" +

                        // Debug log
                        "console.log('Restoring state: playing=' + wasPlaying + ', src=' + " +
                        "   (savedSrc ? savedSrc.substring(0, 30) + '...' : 'none') + ', time=' + savedTime);" +

                        // If Java state indicates playing
                        "var javaPlaying = " + isMusicPlaying + ";" +
                        "var javaSrc = '" + escapeJsString(currentSong) + "';" +

                        // Logic to determine what to do
                        "if (javaPlaying && javaSrc) {" +
                        "   console.log('Java says music should be playing');" +
                        "   if (audio.src !== javaSrc) {" +
                        "       audio.src = javaSrc;" +
                        "   }" +
                        "   var playPromise = audio.play();" +
                        "   if (playPromise !== undefined) {" +
                        "       playPromise.catch(e => console.log('Play error from Java state: ' + e));" +
                        "   }" +
                        "   return {success: true, source: 'java'};" +
                        "} else if (wasPlaying && savedSrc) {" +
                        "   console.log('Local storage says music should be playing');" +
                        "   if (audio.src !== savedSrc) {" +
                        "       audio.src = savedSrc;" +
                        "   }" +
                        "   audio.currentTime = savedTime;" +
                        "   var playPromise = audio.play();" +
                        "   if (playPromise !== undefined) {" +
                        "       playPromise.catch(e => console.log('Play error from localStorage: ' + e));" +
                        "   }" +
                        "   return {success: true, source: 'localStorage'};" +
                        "} else {" +
                        "   console.log('No saved state indicates music should be playing');" +
                        "   return {success: false, reason: 'not_playing'};" +
                        "}" +
                        "})()";

                webView.evaluateJavascript(restoreStateScript, result -> {
                    Log.d(TAG, "Restore player state result: " + result);
                });
            } catch (Exception e) {
                Log.e(TAG, "Error restoring player state: " + e.getMessage(), e);
            }
        }
    }

    @Override
    protected void onDestroy() {
        try {
            if (bannerAdView != null) {
                bannerAdView.destroy();
            }

            if (webView != null) {
                savePlayerState();

                // Clean up WebView properly to avoid memory leaks
                webView.stopLoading();
                webView.clearHistory();

                ViewParent parent = webView.getParent();
                if (parent instanceof ViewGroup) {
                    ((ViewGroup) parent).removeView(webView);
                }

                webView.destroy();
                webView = null;
            }

            if (wakeLock != null && wakeLock.isHeld()) {
                wakeLock.release();
            }
            // Release wake lock if it exists
            if (wakeLock != null && wakeLock.isHeld()) {
                try {
                    wakeLock.release();
                    Log.d(TAG, "Wake lock released in onDestroy");
                } catch (Exception e) {
                    Log.e(TAG, "Error releasing wake lock: " + e.getMessage(), e);
                }
                wakeLock = null;
            }
        } catch (Exception e) {
            Log.e(TAG, "Error in onDestroy: " + e.getMessage(), e);
        }
        if (isServiceBound) {
            unbindService(serviceConnection);
            isServiceBound = false;
        }
        super.onDestroy();
        unregisterReceiver(screenStateReceiver);

    }
}
